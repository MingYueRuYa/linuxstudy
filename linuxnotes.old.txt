北桥：高速总线的连接设备（cpu→存储器）
南桥：低速总线的连接设备（如键盘，慢速设备）在南桥汇总→接入北桥     
     
//时间：2014-4-5 7:39:04
ls:list 
	-h:作单位转化
	-a:显示以.开头的的隐藏文件
			.表示当前目录
			..表示当前目录的父目录	
	-A:
	-d:显示目录的自身属性
	-i:index node ,inode
	-r:逆序
	-R:递归(recursive)显示
cd:change directory
	cd不加选项就回到家目录，home directory
	cd ~USERANME(进入别人的家目录，只有管理员才有权限)
	cd -表示当前目录和前一次所在目录进行切换
	
命令类型：
	内置命令(shell内置)
	外部命令:在文件系统的某个路径喜爱有个一与命令名称相应的可执行文件
type ：显示指定属于那种类型
(which ls)
环境变量:就是定义当前用户的工作环境
变量:命名的内存空间，可以向里面放数据，就是给变量赋值

PATH:使用冒号隔开的一堆路径
显示环境变量: printenv 

系统在查找命令时，第一次会从PATH的路径，一个个找的，但是第二次会从缓存中，找出命令的路径：hash

date:时间管理
Linux:rtc(实时时钟，硬件时间)
		 硬件始终
		 系统时钟
		 data： 看的系统时钟
		 clock：硬件时钟
ntp:网络时间协议

如果出现乱码的现象：
	export LANG=en

获取命令的使用帮助：
type <命令>：
	判断是否为内部或者是外部命令
内部命令：
	help COMMAND  (一般不用man，简洁的方式就是help)
外部命令：
	COMMAND --help
命令手册：manual
	man COMAND
	
	whatis COMMAND
		
分章节：
1. 用户命令
2.系统调用
3.库用户
4.特殊文件(设备文件，设备的访问入口存在的)
5.文件格式(配置文件的语法)
6.游戏
7.杂项(Miscellaneous)
8.管理命令(/sbin,/usr/sbin,/usr/local/sbin)

//2014年4月8日14:09:52
	<>:必选
	[]:可选
	...:可以出现多次
	|:多选一
	{}:分组	
		 
MAN:	
			NAME:命令名称及功能简要说明
			SYNOPSIS:用法说明，包括可用的选项
			DESCRIPTION:命令功能的详尽说明，可能包括每一个选项的意义
			FILES:说明每一个选项的意义
			BUGS:
			EXAMPLES:使用实例
			SEE ALSO:另外参照
			
翻屏：
			向后翻一屏: SPACE
			向前翻一屏:  b
			向后翻一屏:  ENTER
			向前翻一屏：k		 
			向前后翻页(这种方法不好)：shift+pageUp  shift+pageDown 
查找：
	/KEYWORD ：自前向后
	?KEYWORD ：自后向前
	n：下一个
	N：下一个
	q：表示退出
	

//2014年4月9日13:13:01
date命令：
	date +%F  2014-01-10
	date +%Y-%m-%d 	2014-01-10
	date +%H:%M 20:20
	date +%H-%M 20-20	
	
	hwclock -w  将系统时间同步到硬件时间
	hwclock -s    将硬件时间同步到系统时间
	
在线手册：
info COMMAND(用的比较少)

cd  /usr/share/doc 所有的命令说明文档

//2014年4月11日12:55:29
backslah 反斜杠
escape 逃逸
echo 
printf
文件系统：
	rootfs:根文件系统

FHS:Linux

/boot:系统启动相关的文件，如内核、initrd、以及grud(bootloader)

/dev :设备文件
		块设备：将信息存储在固定大小的块中，每个块都有自己的地址。数据块的大小通常在512字节到32768字节之间。块设备的基本特征是每个块都能独立于其它块而读写。磁盘是最常见的块设备，随机设备
		字符设备：指在I/O传输过程中以字符为单位进行传输的设备，例如键盘，打印机等。请注意，以字符为单位并不一定意味着是以字节为单位，因为有的编码规则规定，1个字符占16比特，合2个字节，线性访问的，有次序的，字符为单位
		设备号：主设备号（major） 和次设备号（minor）
		
/etc :配置文件

/home:用户的家目录，每一个用户家目录默认为/home/USERNAME

/root:root用户在根目录，是个特殊用户，管理员的家目录

/lib:库文件
/lib/modules:内核模块文件
	静态库：.a，直接连接到静态库所在的位置，作为程序的一部分运行的
	动态库：.dll(Windows),.os(shared object)，先载入内存中，如果别的程序也学要这库，就不需要再载入了

/media:挂载点目录,移动设备
/mnt:额外的临时文件系统

/opt：可选目录，第三方程序的安装目录
/proc：伪文件系统，内核映射文件   
/sys： 伪文件系统，跟硬件设备相关的属性映射文件
/tmp：临时文件 ，/var/tmp
/var：可变化的文件
/bin：binary  可执行文件，用户命令，这是和系统启动有关联的
/sbin：管理命令

/usr：shared read-only universe
	/usr/bin ,为系统提供基本功能
	/usr/sbin
	/usr/lib

/usr/local:  第三方软件安装的目录
	/usr/local/bin
	/usr/local/sbin
	/usr/local/lib
特殊文件没有大小的，只有元数据

//2014年4月12日8:17:46
文件的命名规则：
1.长度不能超过225个字符
2.不能使用/当文件名
3.严格区分大小写


相对路径：从当前位置找
绝对路径：有根目录开始


文件管理 删除和创建
#	touch 
# 	stat
# file  查看文件内容的类型
	 创建文件，可以使用文件编辑器
#rm
	 删除文件
		-i
		-f 强行删除
		-r 递归删除目录，删除根目录，及其所有的目录文件
目录管理
#	ls
#	cd
#	pwd
#	mkdir：创建空目录
		/mnt/test/x/m,y
		mkdir  -p /mnt/test/{x/m,y}
				命令行展开
#	tree：查看目录树
#	 remove：删除目录，只能删除空目录，支持 -p选项
#  stat


运行程序
设备管理
软件管理
进程管理
网络管理

//2014年4月12日21:07:20
修改IP地址 ：vi /etc/sysconfig/network-scripts/ifcfg-eth0
重启服务：service network restart

复制文件和移动文件
cp:copy
	-r   递归
	-f   强行
	-p  保留属组
	-i    覆盖前提示
	-a  归档复制，常用与备份
cp 如果复制链接的话，会将链接指向的文件直接复制到目的地

mv：move  
 	mv →原本为mv -i  可以加行反斜线\ 还原为mv
	mv SRC DEST
	mv -t DEST SRC

nano 文本编辑器

install 
	-d DIRECTORY ...可以创建目录
install -t DIRECTORY SRC...	

一个文件到一个文件
多个文件到一个目录 （前面的都是源文件，最后一个就是目录，必须是目录，不能是文件）

符号链接：快捷方式

//2014年4月13日10:24:36
发行版：Fedora，RedHat(CentOS)，SUSE，Debian(Ubtuntu,Mint)，Gentoo，LFS(Linux From Scratch)
编译：将源代码经过CPU转化为对应平台可以执行的二进制格式，这和硬件密切相关的
Redhat：采用通用格式的进行编译，使用老的CPU进行编译（这样就不能发挥CPU的所有性能），现在的大多数CPU都会采用向后兼容（新的兼容老的），32位的CPU可以跑在64位的CPU上，反过来就不行
查看文本：
cat、tac、more、less、head、tail

cat：不能分屏显示
	-n  显示行号
	-E  

分屏显示：
more，less
more：支持向后翻，不支持向前翻(可以向前翻，但是执行到了后面就不能向前翻)
less：和man中的用法类似

head：查看前N行  默认都是10
tail：查看有N行
	-n
	-f  查看文件尾部，并不会退出的，等待显示后续追加的文件新内容
	
文本处理：
cut、join、sed、awk	
	cut -d : -f1 /etc/passwd
		-d		指明分隔符(默认是一个空格)
		-f		显示第几个字段
			-f1 表示第一个字符
			-f1,3 表示第一个和第三个
			f1-3 表示一到三
			


Ctrl+C 中断信号
	
对于linux而已，每行结束的结束符是"$"，Windows是"$"+回车

ifconfig 查询IP地址  vi /etc/sysconfig/network-scripts/eth0      
网卡配置：
IPADDR=192.168.1.10 #IP地址
NETMASK=255.255.255.0 #掩码值
NETWORK=192.168.1.0 #网络地址(可不要)
BROADCAST=192.168.1.255#广播地址（可不要）
GATEWAY=192.168.1.1 #网关地址
ONBOOT=yes # [yes|no]（引导时是否激活设备）
USERCTL=no#[yes|no]（非root用户是否可以控制该设备）
BOOTPROTO=static #[none|static|bootp|dhcp]（引导时不使用协议|静态分配|BOOTP协议|DHCP协议）
然后重启服务service network restart生效,或者/etc/init.d/network restart生效

重要的热键 tab ctrl+c ctrl+d
tab用于全命令和文件路径
ctrl+c 中断正在执行
ctrl+d 表示键盘

drwxr-xr-x  	2						root 		root    		4096        12-01 20:50              bin
					2--硬链接数     所有者		所属组		文件大小   创建或者修改的时间	文件名
数据块 block 512字节(存储数据的最小单位)，数据块的大小可以调整的，数据块越小，存储的速度就慢，如果越大就可能造成很大的浪费空间

文件处理命令：
名称：touch

mv:
移动文件，改名称
mv services service
文件浏览：
cat 只能显示最后一屏的内容
more 可以显示所有的内容 f或者空格翻页 enter翻行 q：表示退出
head 查看文件的前几行内容(默认是10行)
tail 查看文件的前几行内容（tail -f  动态显示文件内容）
ln 软硬链接 可以跨文件系统
ln -s /etc/services  serviec.soft  软连接  windows快捷方式
ln /etc/services services.hardlink 硬链接 类似copy+同时更新 与源文件相同的inode 不能跨文件系统
cp -p(p选项会让时间和源文件一样)
linux处理任何的文件都要有个数字标记，内核不认识字母是认识数据，如进程有PID，文件FID→i-inode i节点

权限管理命令：chmod
chmod   u +			r
			  g  -			w
			  o  =(赋权)	x
u-所有者
g-所属组
o-其他人

rwx 可读可写可执行 chmod u+wx chmod o-rx chmod g=rwx
		r-4  w-2   x-1  rwxr-xr-- 754
代表字符			权限  					对文件的含义					对目录的含义
r						读权限				可以查看文件内容		    可以列出目录中的内容
w 					写权限				可以修改文件内容			可以在目录中创建、删除文件
x						执行权限文件	可以执行文件				可以进入目录

chown 改变文件或者的目录所有者
chown nobody [文件名][目录]
chgrp 改变用户组 chgrp [组名] [文件名]
umask
0022 	0-特殊权限为 022-用户权限位，权限掩码值
	777
-	022
-------------
	755
linux权限规则：
缺省创建的文件不能授予可执行的x权限

which 搜索命令所在目录
whereis 搜索命令所在目录+帮助所在目录
find 查找文件和目录(尽量不要在root目录下搜索)
		路径
		-name 文件名 * 匹配任意字符 init* ?匹配单个字符
		-size 文件大小  block数据块为单位 512字节 100MB=?block  100MB=102400KB=2048000block 大于 +  小于 -  等于 find / -size 2048000
		-user 文件所有者 
		时间
		1.天，ctime、atime、mtime
		2.分钟、cmin、amin、mmin、
		c-change(改变，表示文件的属性被修改过，所有者，所属组)
		a-access(访问) 文件被查看
		m-modify(修改) 表示文件的内容被修改过
		-之内 ，+超过 
连接符(一) -a and  逻辑与 -o or 逻辑或
find /etc -size +168340 -a -size 2048000 -
		-type  文件类型  f 二进制文件 l软连接文件 d目录
连接符(二) find ......-exec 命令 	{}     \		;
												表示find查找的结果
														表示转义符	
																结束	
find /etc -name inittab -exec ls -al {} \;(查找文件，并执行ls命令，此为固定格式)

-inum i节点
问题：如何删除"a b"文件？
find . -inum 652830 -exec rm {} \;(其中652830文件的节点号 ls -i查询节点号 "."表示当前的目录) (用同样的方法可以删除-abc文件)

locate与updatedb(定期更新数据库) locate只有在linux中有 unix没有

grep
	grep [指定字串][源文件]
	功能：在文件中搜寻字串匹配的行并输出 

man
	不仅能查看命令帮助 还能查看配置文件的帮助  只能是配置文件的帮助，不能配置文件的绝对路径，且文件必须是系统的配置文件
	帮助分为很多种，第一种就是命令的帮助，第五种就是配置文件的帮助 man 1 passwd  man 5 passwd
 whatis [命令]	
	获得索引的简短说明信息
	例如：whatis ls   apropos fstab 相当于man -k
	
help 查看shell内置命令的帮助
压缩解压命令:
gzip  后缀名：.gz(压缩文件名的后缀)
	特点：
		1.只能压缩文件，不能压缩目录
		2.不保留原文件
zip:windows和linux默认通用的格式
		1.会保留原文件
zip [压缩之后的文件名]  文件名
zip -r [压缩之后的目录名]  目录名
unzip 解压文件
解压缩文件 gunzip [文件名]、gzip -d [文件名]
bzip2(gzip的升级版) bzip2 -k [原文件名] (-k选项会保留源文件)
bunzip2 -k [文件名] (-k选项会保留源文件)
对目录进行压缩解压命令：tar
	-c 产生.tar打包文件
	-v 显示详细消息
	-f  指定压缩后的文件名  指定解压文件
	-z  打包同时压缩   解压缩
	-x  解包.tar文件
	
file [文件名] 判断文件的类型

write [用户名] 只要用户登陆上linux就可以发送信息
Ctrl+D 停止发送
wall 发送给所有的用户

在root下 passwd [用户名] 就可以直接修改密码 不用输入就密码

ping -c [次数] ip地址
ping -s [包的大小(小于65507)] ip地址



2014年7月4日19:39:44
ifconfig eth0 [IP地址] 这只是临时修改ip地址

shutdown -h now  现在关机	
reboot 重启

shell应用技巧
tab补全命令
clear →清屏  CTRL+L
CTRL+U 删除光标前面的内容
history 查看输入命令的历史
alias 查看系统自带的别名   alias copy=cp   给cp其别名为copy 
alias xrm="rm -r"  (如果是命令组合的话，必须用双引号将命令组合)
unalias copy 删除别名 
Shell对于每一个进程预先定义3个文件描述字（0，1,2）
0	(STDIN)标准输入 （键盘）
1	(STDOUT)标准输出 （显示屏）
2 	(STDERR)标准错误输出 （显示器）
ls -l /tmp >tmp.msg  将tmp目录中的信息重定向到tmp.msg中并保存起来(more来查看) ">"重定向将原来的内容清空再将新的内容输入  ">>"则是追加内容
"<"输入重定向(不需要从键盘输入) wall < /test/tmp.msg
ls  /dke 2>dke.error 如果查看错误会将错误信息保存起来 否则就不会保存
管道概念：将一个命令的输出传送给另一个命令，作为另一个命令的输入
ls -l /etc |more （将ls -l /etc查看的内容作为more的输入内容，就是用more查看ls -l /etc目录中内容）
wc -l 统计有多少行 wc -l /etc/services  
ls -l /etc |grep init|wc -l 统计etc中含有init有多少行
";" 让多个命令连续执行 pwd;ls;date
"&&" 链接两个命令command1&&command2
					成功	执行
					失败	不执行
"||" 链接两个命令command1&&command2
					不成功	执行
					成功	不执行
命令替换付：将一个命令的输入作为另一个命令的参数
Command1 `Command2`(是1旁边的撇号不是单引号) pwd `ls -la`

vi 编辑器使用
	i、a、o为插入模式
	esc为编辑模式  (set number/nu设置行号)
	默认进入的为命令模式
			插入命令
	命令		作用
	a			在光标后附加文本
	A			在本行未附加
	i			在光标前
	I			在本行开始
	o			在光标下
	O			在光标上
	
	
			定位命令
	命令		作用
	h			左键	
	j			下键	
	k			上键	
	i			右键	
	M			移至屏幕中端
	0			移至行首
	H			移至屏幕上端
	L			移至屏幕下端
	$			移至行尾	
	:set nu 	设置行号
	:set nonu	取消行号
	gg			到第一行
	G			到最后第一行
	nG			到第n行
	:n			到第n行
			删除命令
	命令		作用
	x			删除光标所在处字符
	nx			删除光标所在处n个字符
	dd			删除光标所在行，ndd删除n行
	dG			删除所在行的内容
	D			删除关闭所在处到未尾的内容
	:n1,n2d		删除指定范围的行
	
			复制命令
	命令		作用
	yy、Y		复制当前行
	nyy、nY		复制当前行一下n行
	dd			剪切当前行
	ndd			剪切当前行一下的n行
	p、P		粘贴在当前光标所在行下或者行上
			替换和取消命令
	命令		作用
	r			取代光标所在处字符
	R			从光标所在处开始替换字符，按ESC结束
	u			取消上一步操作
			搜索和替换
	命令				作用
	/string			向前搜索指定字符串，搜索时忽略大小写:set ic
	n					搜索指定字符串的下一个位置
	:%s/old/new/g		全文替换指定字符串
	:n1,n2%s/old/new/g	在一定范围内替换指定字符串
	:wq ==ZZ  保存
	:w 保存并不退出  :w /root/test/test.bak  重新保存一份在别的路径
	
应用实例
	导入文件：r文件名 :r test.c
	在Vi中执行命令：！命令  !date、：r !date
	定义快捷键:map 快捷键  出发命令
			:map ^p(ctrl+v ctrl+p才会出现^p) I#<ESC>在行首插入#并进入编辑模式
			:map ^E 0x (unmap ^E取消快捷键) 删除行首字符（0不是进入插入模式的）
	连续注释：
			:n1,n2s/^/#/g(^表示行首)
	删除注释:n1,n2s/^#//g
			:n1,n2s/^/\/\//g   （\/\/代表'//'，'\'为转义符）
	替换:
			:ab liumail 635672377@qq.com(输入liumail回车就变成了635672377@qq.com,unab可以取消原来的定义)
	一般情况下 配置vi设置的时候只能在当前环境下有作用，退出再编辑的时候就不行了
	为此必须修改vi的配置文件.vimrc 这个文件就在每个用户的家目录下 /home/li(用户名)/.vimrc 打开编辑 
		set nu
		ab liumail	635672377@qq
		:map ^p I#<ESC>
		.......
		
		系统引导
	固件firmware(CMOS/BIOS)  →POST加电自检  这是在物理层面上检测硬件是否可用
			↓
	自举程序Bootloader(GRUB) →载入内核
			↓
		载入内核Kernel		 →驱动硬件		这是在操作系统的层面上，让操作系统认识和调用硬件
			↓
		 启动进程init
			↓
	读取执行配置文件/etc/inittab
	
	vi /etc/grub.conf 查看grub的配置文件
	
	init启动后读取inittab文件，执行缺省运行级别，从而继续引导过程。在UNIX系统中，init时第一个可以存在的进程，它的PID恒为1，但它必须向一个更高级别的功能负责:PID为0的内核调度器(Kerne scheduler)，从而获得CPU时间
	
如果父进程结束了，子进程必须结束，如果因为某种特殊的原因，系统检测到了孤儿进程会将孤儿进程的父进程指向init进程
如果子进程结束了，但是由于某种原因父进程不知道，但始终试图和子进程保持联系，这种子进程称为僵尸进程，系统是不允许存在
NFS networkFileSystem 网络文件系统共享，不安全
运行级别：
	0-halt 关机级别
	1-单用户，没有图形界面，只有root可进入
	2-多用户登陆，没有NFS
	3-所有用户都可以登陆，只有字符界面
	4-未定义，用户自己可以定义
	5-X11 系统默认的登陆级别 含有图形界面
	6-reboot 重启
查看运行级别  vi /ect/inittab
runlevel 查看当前运行级别
N(S) 3 (如果是S表示当前级别已经被修改了)
telinit(init)切换运行级别
telinit [0123456Ss](Ss表示1)
grep -v "^#" /etc/inittab | more (查看/etc/inittab中除去行首"#")

	inittab文件剖析
在inittab中，所有条目采取以下格式：
id:run-levels:action:process
id:标示符，一般为两位字符或数字
run-level:指定运行级别，可以指定多个
action:指定运行状态
process:指定要运行的脚本/命令

ls /etc/rc.d/rc[0123456].d目录中的文件(每一个运行级别都会对应一个/etc/rc.d/rc[0-6].d文件)
以K，S开头的分别为kill(不执行的)，start(执行的，S后面的数字表示运行先后，越小越先启动，如果数字一样则按文件的创建的先后顺序进行)，这是为了在运行级别切换的时候用户判断哪些是需要执行，哪些不执行的。如果不想脚本启动，使用mv S12xxxxxx s12xxxxxx 将文件修改名字小s不会启动

		启动流程
		firmware(CMOS/BIOS)		→POST加点自检
				↓
			Bootloader			→载入内核
				↓
			载入内核Kernel		→驱动硬件
				↓
			  inittab	
				↓
			读取/etc/inittab
				↓
			initdefault
				↓
			/etc/rc.d/rc.sysinit
				↓
			/etc/rc.d/rc
				↓
			/etc/rc.d/rcN.d 	N=0-6
				↓
				username
				password
				
/etc/rc.d/init.d 该目录下包含各个运行级别的服务程序脚本

设置自启动程序
ls -s 生成超链接方式
chmod u+x /etc/rc.d/msg.script (要有执行权限)
ls -s /etc/rc.d/init.d/msg.script /etc/rc.d/rc3.d/S100msg.script
		源文件							生成超链接对应的目录
chkconfig查看正在运行的服务,只能修改系统默认的安装服务
chkconfig --levels 2345 sshd off(在运行2345级别下把sshd关闭)
dmesg 查看系统启动的信息，dmesg | grep eth0 (grep sdb)在日志消息中查看(eth0)第一块网卡(在日志中查看第二块硬盘的信息)，如果有的信息表示被识别了，否则就没有被识别

所有的日志信息都在 /var/log

















2014-8-11 23:32:32
/etc/passwd 
root:x:0:0:root:/root:/bin/bash
字段				含义
用户名			用户登录系统时使用的用户名
密码			密码位
UID				用户标识号
GID				缺省组标识号
注释性描述		例如存放用户全名等信息
宿主目录		用户登录系统后的缺省目录
命令解释器		用户使用的shell，默认为bash

先将密码写到passwd中在转到shadow中
#pwunconv  将shadow中的密码转到passwd中
#pwconv	   将passwd中的密码转到shadow中
通过vi创建用户
#vi /etc/passwd(编辑文件,在最后一行添加)
1.linux_study::502:502::/home/linux_study:/bin/bash
2.#mkdir /home/linux_study(创建家目录)
3.#chown linux_study  /home/linux_study(修改目录的所属者)
4.#vi /etc/shadow(编辑文件)
5.#linux_study ::14966:0:8888:7:::


为什么普通用户可以修改密码？
原因：SetUID的定义：当一个可执行程序具有SetUID权限，用户执行这个程序时，将以这个程序所有者的身份执行。

实验：给touch命令授予s权限
1.#which touch
2.#umask (0022,最前面的0表示特殊权限)(这条命令可有可无)
3.#chmod u+s /bin/touch
4.#chmod u-s /bin/touch  (将权限改回去)

文本排序：
sort：着个进行排序 字段分隔符排序，但是不会对原文进行排序，只是对输出的内容做排序，按照第一个字符的ASCII码排序，如果第一个相同的话，就看第二个
	-n 数值排序
	-r 反过来排序
	-t 以什么为分隔符
	-k 表示第几个
	-u 相同的只要一个
#sort /etc/fstab	
#sort -t: -k3 /etc/passwd

uniq:
	 -c 显示文件中行重复的次数
	 -d  只显示重复的行

文本统计：wc(word count)  空白也算字符
	x   	xx    xxx  FIleName
	行数  单次数  字符数	
	
字符处理命令：tr --转换或者删除字符(逐个字符进行处理的)
	 -d 删除出现在字符集中的所有字符
#tr 'ab' 'AB' </etc/fstab a->A b->B(a,b都是字符集)
#tr 'a-z' 'A-B' 将a-z的小写字符换位大写字符

bash及其特性：
shell：外壳
GUI：Gnome，KDE，Xfce
CLI：sh，csh，ksh，bash

进程：在每个进程看来，当前主机上只存在内核和当前进程
进程是程序的副本，进程是程序执行的实例
用户环境：
	$ 普通用户
	# root用户
shell：存在子shell  可以用pstree
bash：
	1.命令历史、命令补全、路径补全
	2.管道、重定向
	3.命令别名
	4.命令行编辑
	5.命令行展开
	6.文件名通配
	7.支持变量
	8.支持编程
	
命令行编辑：
光标跳转：
	Ctrl+a：跳到行首
	Ctrl+e：跳到行尾
	Ctrl+u：删除光标之命令行首内容
	Ctrl+k：删除光标之命令行尾内容
	Ctrl+l：清屏

命令历史：
查看命令历史：history
	-c 清空命令历史
	-d OFFSET [n] 删除指定位置 #history -d 500 3 (从500行开始删除3条记录)
	-w 保存命令历史至历史文件中
环境变量：
PATH：命令搜索路径
HISTORYSIZE：命令历史大小 echo $HISTORYSIZE

命令历史使用技巧：
	!n  	执行命令历史中第n条命令
	!-n 	执行命令历史中倒数第n条命令
	!!		执行上一条命令
	!string 执行命令历史中最经一个以指定string为开头的命令
	!$		引用是一个命令的最后一个参数 
	esc,.	引用是一个命令的最后一个参数 
	alt+.	引用是一个命令的最后一个参数 
	
取别名：
	alias 
	#alias cls=clear (如果后面有选项的话，要用单引号引起来'clear [options]'，注意只在当前的bash生命周期中有效，别名的有效范围为当前shell进程)
	unalias	撤销别名
	#unalias cls
	\CMD 	使用命令本身
	
命令替换：$(COMAND)，反引号 `COMMAND`
把命令中某个子命令替换为其执行结果的过程
	#echo "the current directory $(pwd)"
	#touch file-$(date +%F-%H-%M-%S).txt
	
bash支持的引号
``：命令替换
""：弱引用，可以实现变量替换
''：强引用，不完成变量替换

文件名通配,globbing
	*	任意长度的任意字符
	？	匹配单个字符 
	[]	匹配指定范围内的任意单个字符 [abc] [a-z] [0-9] [A-Z] [a-zA]
	[^] 匹配指定范围之外的任意单个字符	
	下面的都支持^
	[:space:]	所有的空白字符
	[[:space:]] 匹配任意的空白字符 里面的[]相当于字符集
	[:punct:]	所有的标签符号
	[:lower:]	所有的小写字母
	[:upper:]	所有的大写字母
	[:alpha:]	大小写字母
	[:digit:]	数字
	[:alnum:]	数字和大小字母
	#man 7 glob 查看此类的说明
	
	
	
操作系统的结构
	-应用程序		库(.os)-------
	-----------内核-----------
	-----------硬件-----------
应用程序->进程 需要依赖库 必须将库先装入内存中 同时又启动一个进程 这个进程也需要这个库 此时就可以直接从内存中copy一份库，不需要再装入库中->共享库

安全上下文(security context)
进程也有权限之别
权限：
	r,w,x
文件：
	r：可读 可以使用类似cat等命令查看文件内容
	w：可写 可以编辑删除此文件
	x：可执行 excutable 可以在命令提示符下提交给内核运行
	
用户：UID，/etc/passwd
组：GID，/etc/group
影子口令：
用户 /etc/shadow
组：/etc/gshadow

用户类别：
管理员：UID:0
普通用户 1-65535
	系统用户  1-499
	普通用户  500-60000
用户组
	管理员组：	
	普通组：
		系统组：
		一般组：
	用户组类别：
		私有组：创建用户时，如果没有为其指定所属的组，系统会自动为其创建一个与用户名同名的组
		基本组：用户的默认组
		附加组、额外组：默认组以外的组
		
#whatis command  查看command命令有几个章节的man文档

加密方法：
	对称加密：加密盒解密使用同一个密码
	公钥加密：每个密码都成对出现，一个为私钥(secret key) 一个为公钥(public key)
	单项加密：散列加密，提取数据特征码，指纹加密 主要用与数据校验
		1.雪崩效应  -->放逆向工程
		2.定长输出
			MD5：Message Digest 5表示版本  128位定长输出
			SHA1：Secure Hash Algorithm,160位定长输出 1表示版本
			
#which useradd
#ls -l $(which useradd)
#useradd tom ->添加用户
#passwd tom  ->修改密码
#groupadd mygroup

useradd [option] USERANME
	-u UID	#useradd -u 1000 user1
	-g GID(基本组)  
	-G GID,...(附加组)
	-c "COMMENT" 注释信息
	-d /path/to/somedir (给出路径)  指定家目录
	#useradd -c "Tony Blare" -d /home/blare user4
	-s 指定shell #useradd -s /sbin/nologin user5
	-m -k  强行复制配置文件 到家目录
	-M 强行指定 不创建家目录
	-r 添加系统用户
环境变量：	
	PATH：命令搜索路径
	HISTORYSIZE：命令历史大小
	SHELL：用于当前用户的shell
	
userdel: 删除用户
userdel [option] USERANME
	-r  删除用户的同时，会删除家目录
id：查看用户的账号属性信息
	-u
	-g
	-G
	-n
finger  查看用户账号属性
finger USERANME

修改用户账号属性：
usermod 
	-u 修改uid
	-g 基本组：用户的默认组(必须是事先存在的组)
	-G -a 为用户追加新的附加组 (不加-a)会覆盖此前的附加组
	-c 注释信息
	-d -m 修改家目录  同时会将家目录的文件同时复制新的家目录中
	-s 修改shell
	-l 修改用户登录名
	-L 锁定账号 类似禁用
	-U 用户解锁
chsh：修改用户的默认shell
chfn：修改用户的注释信息
passwd：密码管理
	-l 	
	-u
	--stdin 
	-d	删除用户密码
#echo "redhat"|passwd --stdin user4
pwck 检查用户账号的完整性

组管理：
groupadd：创建组
	-g GID
	-r 添加系统组
gropemod:
	-g GID
	-n 修改组名
groupdel 删除组
gpasswd 给组加密码 	newgrp 在临时切换到新组的时候就要密码
